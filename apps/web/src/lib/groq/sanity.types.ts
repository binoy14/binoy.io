/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Contact = {
  _id: string;
  _type: 'contact';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: 'Twitter' | 'Youtube' | 'Email' | 'Github' | 'Linkedin';
  link: string;
};

export type ProjectImage = {
  _id: string;
  _type: 'projectImage';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  alt: string;
  caption: string;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Project = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  featuredDescription: string;
  slug: Slug;
  featuredImage: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: 'imageInfo';
  };
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  projectImages?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'projectImage';
  }>;
  order: number;
};

export type ImageInfo = {
  _type: 'imageInfo';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  caption?: string;
};

export type Description = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: 'span';
    _key: string;
  }>;
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
  listItem?: 'bullet' | 'number';
  markDefs?: Array<{
    href?: string;
    _type: 'link';
    _key: string;
  }>;
  level?: number;
  _type: 'block';
  _key: string;
}>;

export type BlogBody = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
      listItem?: 'bullet';
      markDefs?: Array<
        | {
            reference?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'blog';
            };
            _type: 'internalLink';
            _key: string;
          }
        | {
            href?: string;
            blank?: boolean;
            _type: 'link';
            _key: string;
          }
      >;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }
  | ({
      _key: string;
    } & Code)
>;

export type Blog = {
  _id: string;
  _type: 'blog';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  publishedAt: string;
  excerpt: string;
  body: BlogBody;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type Code = {
  _type: 'code';
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};
export declare const internalGroqTypeReferenceTo: unique symbol;


// Source: ../web/src/lib/groq/getBlogBySlug.ts
// Variable: getBlogBySlug
// Query: *[_type == "blog" && slug.current == $slug] {  title,  publishedAt,  body[]{    ...,    _type == "image" => {      "asset": @.asset->{        ...      }    },    markDefs[]{      ...,      _type == "internalLink" => {        "slug": @.reference->slug      }    }  }}[0]
export type GetBlogBySlugResult = {
  title: string;
  publishedAt: string;
  body: Array<
    | {
        _key: string;
        markDefs: null;
      }
    | {
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        markDefs: null;
      }
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet';
        markDefs: Array<
          | {
              href?: string;
              blank?: boolean;
              _type: 'link';
            }
          | {
              reference?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'blog';
              };
              _type: 'internalLink';
              slug: Slug | null;
            }
        > | null;
        level?: number;
        _type: 'block';
      }
  >;
} | null;


// Source: ../web/src/lib/groq/getBlogs.ts
// Variable: getBlogs
// Query: *[_type == "blog"] {  title,  excerpt,  slug,  publishedAt,  "readingTime": round(length(pt::text(body)) / 5 / 200 )} | order(publishedAt desc)
export type GetBlogsResult = Array<{
  title: string;
  excerpt: string;
  slug: Slug;
  publishedAt: string;
  readingTime: unknown;
}>;


// Source: ../web/src/lib/groq/getContacts.ts
// Variable: getContacts
// Query: *[_type == "contact" && !(_id in path("drafts.**"))] {  link,  title} | order(title asc)
export type GetContactsResult = Array<{
  link: string;
  title: 'Email' | 'Github' | 'Linkedin' | 'Twitter' | 'Youtube';
}>;


// Source: ../web/src/lib/groq/getProjectBySlug.ts
// Variable: getProjectBySlug
// Query: *[_type == "project" && slug.current == $slug && !(_id in path("drafts.**"))] {  _id,  title,  description,  slug,  "projectImages": projectImages[]-> {    _id,    alt,    caption,    image {      asset->{        ...,      }    }  }}[0]
export type GetProjectBySlugResult = {
  _id: string;
  title: string;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  slug: Slug;
  projectImages: Array<{
    _id: string;
    alt: string;
    caption: string;
    image: {
      asset: {
        _id: string;
        _type: 'sanity.imageAsset';
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    };
  }> | null;
} | null;


// Source: ../web/src/lib/groq/getProjects.ts
// Variable: getProjects
// Query: *[_type == "project" && !(_id in path("drafts.**"))] {  _id,  featuredImage {    asset -> {      ...,    }  },  featuredDescription,  title,  slug,  order} | order(order asc)
export type GetProjectsResult = Array<{
  _id: string;
  featuredImage: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  featuredDescription: string;
  title: string;
  slug: Slug;
  order: number;
}>;


// Source: ../web/src/lib/groq/getProjectsSlugs.ts
// Variable: getProjectSlugs
// Query: *[_type == "project" && !(_id in path("drafts.**"))] {  slug}
export type GetProjectSlugsResult = Array<{
  slug: Slug;
}>;


